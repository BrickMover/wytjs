package testHttp;

import java.nio.charset.Charset;
import java.nio.charset.CodingErrorAction;
import java.util.Arrays;
import java.util.Map;

import javax.net.ssl.SSLContext;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.Consts;
import org.apache.http.Header;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.config.AuthSchemes;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.config.ConnectionConfig;
import org.apache.http.config.MessageConstraints;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.config.SocketConfig;
import org.apache.http.conn.DnsResolver;
import org.apache.http.conn.HttpConnectionFactory;
import org.apache.http.conn.ManagedHttpClientConnection;
import org.apache.http.conn.routing.HttpRoute;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.DefaultHttpResponseFactory;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.DefaultHttpResponseParser;
import org.apache.http.impl.conn.DefaultHttpResponseParserFactory;
import org.apache.http.impl.conn.ManagedHttpClientConnectionFactory;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.impl.conn.SystemDefaultDnsResolver;
import org.apache.http.impl.io.DefaultHttpRequestWriterFactory;
import org.apache.http.io.HttpMessageParser;
import org.apache.http.io.HttpMessageParserFactory;
import org.apache.http.io.HttpMessageWriterFactory;
import org.apache.http.io.SessionInputBuffer;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicLineParser;
import org.apache.http.message.LineParser;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.util.CharArrayBuffer;
import org.apache.http.util.EntityUtils;

/**
 * 使用httpclient version 4.5.2
 * 支持http and https
 * 支持参数配置
 * @author wangyitao
 *
 */
public class WEBClient {
	private int socketTimeout;

	private int connectionTimeout;

	private int connectionRequestTimeout;

	private int MAX_ROUTE_TOTAL = 100;

	private int DEFUALT_MAX_PER_ROUTE = 10;

	private int MAX_PER_ROUTE = 20;

	private Charset charset = Consts.UTF_8;

	private RequestConfig defaultRequestConfig = RequestConfig.custom()
            .setCookieSpec(CookieSpecs.DEFAULT)
            .setExpectContinueEnabled(true)
            .setTargetPreferredAuthSchemes(Arrays.asList(AuthSchemes.NTLM, AuthSchemes.DIGEST))
            .setProxyPreferredAuthSchemes(Arrays.asList(AuthSchemes.BASIC))
            .build();

	CookieStore cookieStore = new BasicCookieStore();
	CredentialsProvider credentialsProvider = new BasicCredentialsProvider();//用户凭证提供器

	public int getMAX_ROUTE_TOTAL() {
		return MAX_ROUTE_TOTAL;
	}

	public int getDEFUALT_MAX_PER_ROUTE() {
		return DEFUALT_MAX_PER_ROUTE;
	}

	public int getMAX_PER_ROUTE() {
		return MAX_PER_ROUTE;
	}

	public void setMAX_ROUTE_TOTAL(int mAX_ROUTE_TOTAL) {
		MAX_ROUTE_TOTAL = mAX_ROUTE_TOTAL;
	}

	public void setDEFUALT_MAX_PER_ROUTE(int dEFUALT_MAX_PER_ROUTE) {
		DEFUALT_MAX_PER_ROUTE = dEFUALT_MAX_PER_ROUTE;
	}

	public void setMAX_PER_ROUTE(int mAX_PER_ROUTE) {
		MAX_PER_ROUTE = mAX_PER_ROUTE;
	}

	public int getSocketTimeout() {
		return socketTimeout;
	}

	public void setSocketTimeout(int socketTimeout) {
		this.socketTimeout = socketTimeout;
	}

	public int getConnectionTimeout() {
		return connectionTimeout;
	}

	public void setConnectionTimeout(int connectionTimeout) {
		this.connectionTimeout = connectionTimeout;
	}

	public int getConnectionRequestTimeout() {
		return connectionRequestTimeout;
	}

	public void setConnectionRequestTimeout(int connectionRequestTimeout) {
		this.connectionRequestTimeout = connectionRequestTimeout;
	}

	public Charset getCharset() {
		return charset;
	}

	public void setCharset(Charset charset) {
		this.charset = charset;
	}

	private HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> initConnectionFactory() {

		HttpMessageWriterFactory<HttpRequest> requestWriterFactory = new DefaultHttpRequestWriterFactory();
		HttpMessageParserFactory<HttpResponse> responseParserFactory = new DefaultHttpResponseParserFactory(){
			@Override
            public HttpMessageParser<HttpResponse> create(
                SessionInputBuffer buffer, MessageConstraints constraints) {
                LineParser lineParser = new BasicLineParser() {

                    @Override
                    public Header parseHeader(final CharArrayBuffer buffer) {
                        try {
                            return super.parseHeader(buffer);
                        } catch (ParseException ex) {
                            return new BasicHeader(buffer.toString(), null);
                        }
                    }

                };
                return new DefaultHttpResponseParser(
                    buffer, lineParser, DefaultHttpResponseFactory.INSTANCE, constraints) {

                    @Override
                    protected boolean reject(final CharArrayBuffer line, int count) {
                        return false;
                    }

                };
            }
		};
		HttpConnectionFactory<HttpRoute, ManagedHttpClientConnection> connectionFactory = new ManagedHttpClientConnectionFactory(requestWriterFactory, responseParserFactory);
		return connectionFactory;
	}


	private PoolingHttpClientConnectionManager initConnectionManager() {
		SSLContext sslContext = SSLContexts.createSystemDefault();
		Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()
				.register("http", PlainConnectionSocketFactory.INSTANCE)
				.register("https", new SSLConnectionSocketFactory(sslContext))
				.build();
		DnsResolver dnsResolver = new SystemDefaultDnsResolver();
		PoolingHttpClientConnectionManager manager = new PoolingHttpClientConnectionManager(socketFactoryRegistry, initConnectionFactory(), dnsResolver);
		//socket config
		SocketConfig socketConfig = SocketConfig.custom()
	            .setTcpNoDelay(true)
	            .build();
		manager.setDefaultSocketConfig(socketConfig);
		manager.setSocketConfig(new HttpHost("someHost"), socketConfig);//?
		manager.setValidateAfterInactivity(1000);//

		MessageConstraints messageConstraints = MessageConstraints.custom()
	            .setMaxHeaderCount(200)
	            .setMaxLineLength(2000)
	            .build();
		ConnectionConfig connectionConfig = ConnectionConfig.custom()
	            .setMalformedInputAction(CodingErrorAction.IGNORE)
	            .setUnmappableInputAction(CodingErrorAction.IGNORE)
	            .setCharset(charset)
	            .setMessageConstraints(messageConstraints)
	            .build();
		manager.setDefaultConnectionConfig(connectionConfig);
        manager.setConnectionConfig(new HttpHost("somehost", 80), ConnectionConfig.DEFAULT);
        //可配置
        manager.setMaxTotal(MAX_ROUTE_TOTAL);
        manager.setDefaultMaxPerRoute(DEFUALT_MAX_PER_ROUTE);
        manager.setMaxPerRoute(new HttpRoute(new HttpHost("somehost", 80)), MAX_PER_ROUTE);
		return manager;
	}

	public CloseableHttpClient createHttpClinet() {
		CloseableHttpClient httpClient = HttpClients.custom()
				.setConnectionManager(initConnectionManager())
				.setDefaultCookieStore(cookieStore)
				.setDefaultCredentialsProvider(credentialsProvider )
//				.setProxy(proxy)//设置代理
				.setDefaultRequestConfig(defaultRequestConfig)
				.build();

		return httpClient;
	}

	public String GETMethod(String url) throws Exception{
		String responseStr = null;
		CloseableHttpClient httpClient = createHttpClinet();
		try {

			HttpGet httpGet = new HttpGet(url);
			RequestConfig config = RequestConfig.copy(defaultRequestConfig)
					.setSocketTimeout(socketTimeout)
					.setConnectTimeout(connectionTimeout)
					.setConnectionRequestTimeout(connectionRequestTimeout)
					.build();
			httpGet.setConfig(config);
			HttpClientContext context = HttpClientContext.create();
			context.setCookieStore(cookieStore);
			context.setCredentialsProvider(credentialsProvider);

			CloseableHttpResponse response = httpClient.execute(httpGet, context);
			try {
				responseStr = EntityUtils.toString(response.getEntity());
			} finally {
				response.close();
			}
		} finally {
			httpClient.close();
		}
		return responseStr;
	}

	/**
	 *
	 * @param url
	 * @param socketTimeout 0表示使用默认值
	 * @param connectionTimeout 0表示使用默认值
	 * @param connRequestTimeout 0表示使用默认值
	 * @param charset 空表示使用默认值
	 * @return
	 * @throws Exception
	 */
	public String GETMethod(String url, int socketTimeout, int connectionTimeout, int connRequestTimeout, String charset) throws Exception {
		if (socketTimeout > 0) {
			this.socketTimeout = socketTimeout;
		}
		if (connectionTimeout > 0) {
			this.connectionTimeout = connectionTimeout;
		}
		if (connectionRequestTimeout >0) {
			this.connectionRequestTimeout = connectionTimeout;
		}
		if (StringUtils.isNotEmpty(charset)) {
			this.charset = Charset.forName(charset);
		}

		return GETMethod(url);
	}

	public void POSTMethod(String url, Map<String, String> params){}

	public void POSTMethod(String url, Map<String, String> params,
			int socketTimeout,
			int connectionTimeout,
			int connRequestTimeout) {}

}
